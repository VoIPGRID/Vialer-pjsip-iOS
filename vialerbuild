#!/bin/bash

cd `dirname $BASH_SOURCE`
export BASE_DIR=`pwd -P`
export IOS_DEPLOY_TGT="9.0"
export MIN_IOS="-miphoneos-version-min=9.0"

set -o errexit
set -o errtrace

export PRE=" ───── "

function help() {
cat <<EOF
vialerbuild help          # shows this help message.
vialerbuild svn_checkout  # Get the latest PJSIP sources from SVN
vialerbuild clean         # cleans the pjsip source folder.

vialerbuild all           # build fat binary that works on all architectures.
vialerbuild armv7         # build armv7 static lib.
vialerbuild armv7s        # build armv7s static lib.
vialerbuild arm64         # build arm64 static lib.
vialerbuild i386          # build i386 static lib.
vialerbuild x86_64        # build x86_64 static lib.

vialerbuild info armv7    # show architecture information for armv7 libs.
vialerbuild info armv7s   # show architecture information for armv7s libs.
vialerbuild info arm64    # show architecture information for arm64 libs.
vialerbuild info i386     # show architecture information for i386 libs.
vialerbuild info x86_64   # show architecture information for x86_64 libs.

vialerbuild complete ABSOLUTE_PATH_TO_DEPENDENCY_LIB   # Downloads, builds and copies files with opus lib
vialerbuild rebuild	ABSOLUTE_PATH_TO_DEPENDENCY_LIB	  # Delete old framework files and rebuild for all architectures with opus lib
EOF
}

function complete() {
    export DEP_ABSOLUTE_PATH="$1"
    shift
    clean
    svn_checkout $1
    rebuild $DEP_ABSOLUTE_PATH
}

function rebuild() {
    export DEP_ABSOLUTE_PATH="$1"
	rm -rf "$BASE_DIR/Pod/"
    rm -rf "$BASE_DIR/VialerPJSIP.framework/"
    rm -rf "$BASE_DIR/pjsip/logs/"
	mkdir -p "$BASE_DIR"/pjsip/logs/
    all
    copy_headers
    create_framework
}

function clean() {
    echo "$PRE CLEAN"
    echo "WARNING: About to clean directory: $BASE_DIR/pjsip"
    echo "WARNING: About to clean directory: $BASE_DIR/Pod"
    echo "WARNING: About to clean directory: $BASE_DIR/VialerPJSIP.framework"
    echo "waiting 5 seconds for sanity check... CTRL-C to abort now"
    sleep 1 && echo "4..." && \
    sleep 1 && echo "3..." && \
    sleep 1 && echo "2..." && \
    sleep 1 && echo "1..." && \
    sleep 1

    rm -rf "$BASE_DIR/pjsip/"
    rm -rf "$BASE_DIR/Pod/"
    rm -rf "$BASE_DIR/VialerPJSIP.framework/"
}

# Checks out the supplied PJSIP version source from SVN. If no version provided latest version is used.
function svn_checkout() {
    BASE_URL="http://svn.pjsip.org/repos/pjproject"

    if [ -z ${1} ]; then
        echo "No version provided, checking out \"trunk\""
        CHECKOUT_URL="${BASE_URL}/trunk/"
    else
        echo "Checking out version ${1}"
        CHECKOUT_URL="${BASE_URL}/tags/${1}/"
    fi

    if [ ! -d "${BASE_DIR}/src/" ]; then
        # Src does not exist, assuming no previous version downloaded, using checkout.
        svn export "${CHECKOUT_URL}" pjsip/src/
        # Svn checkout http://svn.pjsip.org/repos/pjproject/tags/2.2.1/ src/
    else
        # Src directory exists, using switch to prevent 'is already a working copy for a different URL' error.
        svn switch "${CHECKOUT_URL}" pjsip/src/
    fi
}

# Function Prints info about the created libraries.
function info() {
    echo "$PRE ARCH"
    find Pod/$1/*.a | \
    xargs lipo -info 2>/dev/null | grep "rchitecture" | \
    sed -El "s/^.+\: .+\/(.+) (are|is architecture)\: (.+)$/\\3 - \\1/g" | \
    sort

    echo
    echo "$PRE INCLUDES"
    find src | grep "\\include$" | sort
}

# Shortcut function for building armv7 lib
function armv7() {
	unset CFLAGS LDFLAGS
	export CFLAGS="-miphoneos-version-min=$IOS_DEPLOY_TGT"
	_build "armv7";
}
# Shortcut function for building armv7s lib
function armv7s() {
	unset CFLAGS LDFLAGS
	export CFLAGS="-miphoneos-version-min=$IOS_DEPLOY_TGT"
	_build "armv7s";
}
# Shortcut function for building arm64 lib
function arm64() {
	unset CFLAGS LDFLAGS
	export CFLAGS="-miphoneos-version-min=$IOS_DEPLOY_TGT"
	_build "arm64";
}

# Shortcut function for building i386 lib
function i386() {
	unset CFLAGS LDFLAGS
    export DEVPATH=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer
    export CFLAGS="-O2 -m32 -mios-simulator-version-min=9.0"
    export LDFLAGS="-O2 -m32 -mios-simulator-version-min=9.0"
    _build "i386"
}

# Shortcut function for building x86_64 lib
function x86_64() {
	unset CFLAGS LDFLAGS
    export DEVPATH=/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer
    export CFLAGS="-O2 -m32 -mios-simulator-version-min=9.0"
    export LDFLAGS="-O2 -m32 -mios-simulator-version-min=9.0"
    _build "x86_64"
}

# Shortcut function for building all architectures.
function all() {
    armv7 && echo && armv7s && echo && arm64 && echo && i386 && echo && x86_64
    echo
    _merge
}

# Build function doing the actual library building for the specific architecture
function _build() {
    echo "$PRE BUILD"
    echo "building for $1. this may take a while, tail -f $1.log to see progress."
    echo ""

    cp "$BASE_DIR"/config_site.h "$BASE_DIR"/pjsip/src/pjlib/include/pj
    cd "$BASE_DIR"/pjsip/src
    ARCH="-arch $1" ./configure-iphone --with-opus=$DEP_ABSOLUTE_PATH/opus --with-openh264=$DEP_ABSOLUTE_PATH/libopenh264_arm_7_7s_64 2>&1 > "$BASE_DIR"/pjsip/logs/$1.log

    make dep 2>&1 >> "$BASE_DIR"/pjsip/logs/$1.log
    make clean 2>&1 >> "$BASE_DIR"/pjsip/logs/$1.log
    make 2>&1 >> "$BASE_DIR"/pjsip/logs/$1.log

    echo
    _collect $1
}

# The _build function's output is always stored in the same location causing files to be overridden when another architecture is build.
# This function collects the architecture specific build files and stores them in an appropriate directory.
function _collect() {
    echo "$PRE COLLECT"
    cd "$BASE_DIR"
    mkdir -p pjsip/temp/$1

    #for x in `find src | grep "\.a$"`; do
    for x in `find pjsip/src -name *$1*.a`; do
        cp -v ./$x ./pjsip/temp/$1
    done | tee "$BASE_DIR"/pjsip/logs/collect.log
}

# Finds all the created architecture specific libraries, stored by the _collect function and merges all libraries in one fat lib suitable for all architectures.
function _merge() {
    echo "$PRE MERGE"
    cd "$BASE_DIR"

    mkdir -p "$BASE_DIR"/Pod

    cp -r "$BASE_DIR"/dependencies/opus/lib/* "$BASE_DIR"/pjsip/temp
    cp -r "$BASE_DIR"/dependencies/libopenh264_arm_7_7s_64/lib/* "$BASE_DIR"/pjsip/temp

    mv "$BASE_DIR"/pjsip/temp/libopus.a "$BASE_DIR"/pjsip/temp/libopus-darwin_ios.a
    mv "$BASE_DIR"/pjsip/temp/libopenh264.a "$BASE_DIR"/pjsip/temp/libopenh264-darwin_ios.a

    libtool -o Pod/VialerPJSIP.a `find ./pjsip/temp -name *darwin_ios.a -exec printf '%s ' {} +`
}

# Copies header files form the PJSIP src into a temporary directory.
function copy_headers() {
    echo "$PRE Copying header files to temporary location"
    cd "$BASE_DIR"/pjsip/src
    find . -path ./third_party -prune -o -path ./pjsip-apps -prune -o -path ./include -prune -o -type f -wholename '*include/*.h*' -exec bash -c 'copy_to_lib_dir "{}"' ';'
    cd "$BASE_DIR"
    find ./dependencies/opus/include/opus  -type f -exec bash -c 'copy_to_lib_dir "{}"' ';'
    find ./dependencies/libopenh264_arm_7_7s_64/include/wels  -type f -exec bash -c 'copy_to_lib_dir "{}"' ';'
}

# helper function used by copy_headers
function copy_to_lib_dir() {
    OLD_PATH=$1
    NEW_PATH=()

    PATH_PARTS=(`echo $1 | tr '/' '\n'`)
    for x in "${PATH_PARTS[@]}"; do
        if [ "$x" = "include" ] || [ "${#NEW_PATH[@]}" -ne "0" ]; then
            NEW_PATH+=("$x")
        fi
    done

    NEW_PATH="${NEW_PATH[@]:1}"
    NEW_PATH="${NEW_PATH// //}"

    d=$BASE_DIR/Pod/vialer-pjsip-include/$(dirname $NEW_PATH)
    mkdir -p $d
    cp $OLD_PATH $d
}

# Function creates the framework skeleton copies the files into it and adapts the header files so the #include statements point to the correct location.
function create_framework() {
    PRODUCT_NAME="VialerPJSIP"
    PUBLIC_HEADERS_FOLDER_PATH="${BASE_DIR}/Pod/vialer-pjsip-include"
    LIBRARY_LOCATION="${BASE_DIR}/Pod/"
    export FRAMEWORK_LOCN="${BASE_DIR}/${PRODUCT_NAME}.framework"

    Echo "$PRE Creating the $PRODUCT_NAME framework in $FRAMEWORK_LOCN"

    # Create the path to the real Headers die
    mkdir -p "${FRAMEWORK_LOCN}/Versions/A/Headers"

    # Create the required symlinks
    /bin/ln -sfh A "${FRAMEWORK_LOCN}/Versions/Current"
    /bin/ln -sfh Versions/Current/Headers "${FRAMEWORK_LOCN}/Headers"
    /bin/ln -sfh "Versions/Current/${PRODUCT_NAME}" "${FRAMEWORK_LOCN}/${PRODUCT_NAME}"

    # Copy the public headers into the framework
    /bin/cp -a "${PUBLIC_HEADERS_FOLDER_PATH}/" "${FRAMEWORK_LOCN}/Versions/A/Headers"

    cp -a "${LIBRARY_LOCATION}/VialerPJSIP.a" "${BASE_DIR}/${PRODUCT_NAME}.framework/Versions/A/${PRODUCT_NAME}"


    Echo "$PRE Adapting the framework's header files"
    #Now, replace the #include statements of the framework headers
    i=0
    while IFS= read -r -d '' file; do
        LC_ALL=C sed -i '' "s/include\ </include <$PRODUCT_NAME\//" "$file"
        #to prevent $product_name is inserted multiple times, run a second sed command
        LC_ALL=C sed -i '' "s/<$PRODUCT_NAME\/$PRODUCT_NAME\//<$PRODUCT_NAME\//" "$file"

        #DO NOT REPLACE the default C++ lib's, undo the change
        LC_ALL=C sed -i '' "s/include\ <$PRODUCT_NAME\/stdio.h/include\ <stdio.h/" "$file"
        LC_ALL=C sed -i '' "s/include\ <$PRODUCT_NAME\/stddef.h/include\ <stddef.h/" "$file"
        LC_ALL=C sed -i '' "s/include\ <$PRODUCT_NAME\/stdarg.h/include\ <stdarg.h/" "$file"
        LC_ALL=C sed -i '' "s/include\ <$PRODUCT_NAME\/string.h/include\ <string.h/" "$file"
        LC_ALL=C sed -i '' "s/include\ <$PRODUCT_NAME\/stdlib.h/include\ <stdlib.h/" "$file"
        LC_ALL=C sed -i '' "s/include\ <$PRODUCT_NAME\/assert.h/include\ <assert.h/" "$file"
        LC_ALL=C sed -i '' "s/include\ <$PRODUCT_NAME\/math.h/include\ <math.h/" "$file"
        LC_ALL=C sed -i '' "s/include\ <$PRODUCT_NAME\/ctype.h/include\ <ctype.h/" "$file"
        LC_ALL=C sed -i '' "s/include\ <$PRODUCT_NAME\/setjmp.h/include\ <setjmp.h/" "$file"
        LC_ALL=C sed -i '' "s/include\ <$PRODUCT_NAME\/stdarg.h/include\ <stdarg.h/" "$file"
        LC_ALL=C sed -i '' "s/include\ <$PRODUCT_NAME\/stdarg.h/include\ <stdarg.h/" "$file"
        LC_ALL=C sed -i '' "s/include\ <$PRODUCT_NAME\/inttypes.h/include\ <inttypes.h/" "$file"

        EXIT_CODE=$?
        if [[ $EXIT_CODE != 0 ]]; then
            echo "Error processing file ${file}"
        fi

        i=$((i+1))
    done < <(find "${FRAMEWORK_LOCN}/Versions/A/Headers" -type f -name "*.h" -print0)
    echo "$i files processed"
}

export -f copy_to_lib_dir

if [ -n "$1" ] ; then
    CMD=$1
    shift
    $CMD $*

    echo
    echo "$PRE DONE"

else
    help
fi
